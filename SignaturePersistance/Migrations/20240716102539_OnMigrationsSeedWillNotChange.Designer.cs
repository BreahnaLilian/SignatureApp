// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SignaturePersistance;

#nullable disable

namespace SignaturePersistance.Migrations
{
    [DbContext(typeof(SignatureDbContext))]
    [Migration("20240716102539_OnMigrationsSeedWillNotChange")]
    partial class OnMigrationsSeedWillNotChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SignatureDomain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Commentary")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("SignedBy")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasMaxLength(1024)
                        .HasColumnType("int");

                    b.Property<int>("Stauts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("Files");
                });

            modelBuilder.Entity("SignatureDomain.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDNO")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("JuridicalAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JuridicalName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ee896ee-cb8a-4df4-949b-b6fcc81d76f2"),
                            CommercialName = "LVBGroup",
                            CreateDate = new DateTime(2024, 7, 16, 13, 25, 38, 612, DateTimeKind.Local).AddTicks(1560),
                            IDNO = "0000000000001",
                            JuridicalAddress = "Address1 Ap.1",
                            JuridicalName = "LVBGroup",
                            Status = 1
                        });
                });

            modelBuilder.Entity("SignatureDomain.Entities.SignatureFilesToUsers", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("SignatureFilesToUsers");
                });

            modelBuilder.Entity("SignatureDomain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IDNP")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e631e603-266c-462a-87d3-f606c8111559"),
                            Address = "Planet Earth",
                            CreateDate = new DateTime(2024, 7, 16, 13, 25, 38, 618, DateTimeKind.Local).AddTicks(5994),
                            DateOfBirth = new DateTime(2024, 7, 16, 13, 25, 38, 618, DateTimeKind.Local).AddTicks(5712),
                            Email = "admin@lvbgroup.com",
                            FirstName = "First",
                            Gender = 2,
                            IDNP = "0000000000001",
                            LastModified = new DateTime(2024, 7, 16, 13, 25, 38, 618, DateTimeKind.Local).AddTicks(6281),
                            LastName = "User",
                            OrganizationId = new Guid("9ee896ee-cb8a-4df4-949b-b6fcc81d76f2"),
                            Password = "c1c224b03cd9bc7b6a86d77f5dace40191766c485cd55dc48caf9ac873335d6f",
                            PhoneNumber = "69000001",
                            Role = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("61d001ab-1553-4b8a-af2a-379d1540ed5a"),
                            Address = "Planet Earth",
                            CreateDate = new DateTime(2024, 7, 16, 13, 25, 38, 618, DateTimeKind.Local).AddTicks(7118),
                            DateOfBirth = new DateTime(2024, 7, 16, 13, 25, 38, 618, DateTimeKind.Local).AddTicks(7111),
                            Email = "user@lvbgroup.com",
                            FirstName = "Second",
                            Gender = 2,
                            IDNP = "0000000000002",
                            LastModified = new DateTime(2024, 7, 16, 13, 25, 38, 618, DateTimeKind.Local).AddTicks(7120),
                            LastName = "User",
                            OrganizationId = new Guid("9ee896ee-cb8a-4df4-949b-b6fcc81d76f2"),
                            Password = "b512d97e7cbf97c273e4db073bbb547aa65a84589227f8f3d9e4a72b9372a24d",
                            PhoneNumber = "69000002",
                            Role = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("1f7bddde-fe95-4f29-878d-8e6efca243f1"),
                            Address = "Planet Earth",
                            CreateDate = new DateTime(2024, 7, 16, 13, 25, 38, 618, DateTimeKind.Local).AddTicks(7152),
                            DateOfBirth = new DateTime(2024, 7, 16, 13, 25, 38, 618, DateTimeKind.Local).AddTicks(7150),
                            Email = "user@lvbgroup.com",
                            FirstName = "Third",
                            Gender = 2,
                            IDNP = "0000000000003",
                            LastModified = new DateTime(2024, 7, 16, 13, 25, 38, 618, DateTimeKind.Local).AddTicks(7154),
                            LastName = "User",
                            OrganizationId = new Guid("9ee896ee-cb8a-4df4-949b-b6fcc81d76f2"),
                            Password = "b512d97e7cbf97c273e4db073bbb547aa65a84589227f8f3d9e4a72b9372a24d",
                            PhoneNumber = "69000003",
                            Role = 0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("SignatureDomain.Entities.SignatureFilesToUsers", b =>
                {
                    b.HasOne("SignatureDomain.Entities.File", "File")
                        .WithMany("SignatureFilesToUsers")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SignatureDomain.Entities.User", "User")
                        .WithMany("SignatureFilesToUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SignatureDomain.Entities.User", b =>
                {
                    b.HasOne("SignatureDomain.Entities.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("SignatureDomain.Entities.File", b =>
                {
                    b.Navigation("SignatureFilesToUsers");
                });

            modelBuilder.Entity("SignatureDomain.Entities.Organization", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SignatureDomain.Entities.User", b =>
                {
                    b.Navigation("SignatureFilesToUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
